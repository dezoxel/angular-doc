@ngdoc overview
@name Tutorial: 5 - XHRs & Dependency Injection
@description

<ul doc-tutorial-nav="5"></ul>


Хватит писать приложение с тремя телефонами из жестко прописанного набора данных! Давайте выберем набор 
данных по-больше с нашего сервера используя один из встроенных в angular {@link api/ng сервисов}, который
называется {@link api/ng.$http $http}. Мы будем использовать {@link guide/di внедрение зависимости} 
(dependency injection - DI), встроенное в  Angular, чтобы предоставить этот сервис для `PhoneListCtrl` контроллера. 


<div doc-tutorial-reset="5"></div>

Сейчас вы должны видеть список из 20 телефонов.

Самые важные изменения приведены ниже. Вы можете посмотреть список полных изменений на {@link
https://github.com/angular/angular-phonecat/compare/step-4...step-5 GitHub}:

## Данные

Файл `app/phones/phones.json` является набором данных в вашем проекте, который содержит список 
телефонов по-больше и сохраненный в JSON формате. 

Вот пример этого файла:
<pre>
[
 {
  "age": 13,
  "id": "motorola-defy-with-motoblur",
  "name": "Motorola DEFY\u2122 with MOTOBLUR\u2122",
  "snippet": "Are you ready for everything life throws your way?"
  ...
 },
...
]
</pre>


## Контроллер

Мы будем использовать сервис {@link api/ng.$http $http} в нашем контроллере, чтобы делать
HTTP запросы к нашему веб серверу и получать данные из файла `app/phones/phones.json`. 
`$http` это всего лишь один из нескольких встроенных {@link api/ng Angular-сервисов}, который 
обрабатывает базовые операции веб-приложений (выборка, вставка, обновление и тп). Angular внедряет
эти сервисы для вас, когда они вам нужны. 

Сервисами Angular-а управляет {@link guide/di подсистема DI}. Внедрение зависимости помогает
делать ваши приложения хорошо-структурированными (например, разделяя компоненты для представления, 
данных и контроллера) и слабо связанными (зависимости между компонентами разрешаются не самими 
компонентами, а с помощью подсистемы DI).

__`app/js/controllers.js:`__
<pre>
function PhoneListCtrl($scope, $http) {
  $http.get('phones/phones.json').success(function(data) {
    $scope.phones = data;
  });

  $scope.orderProp = 'age';
}

//PhoneListCtrl.$inject = ['$scope', '$http'];
</pre>

`$http` делает HTTP GET запрос к вашему веб серверу, запрашивая `phone/phones.json` (url 
относителен к нашему файлу `index.html`). Сервер отвечает, предоставляя данные в json файле. 
(Ответ с таким же успехом мог быть сгенерирован динамически. Для браузера и нашего приложения 
они оба являются одинаковыми. В этом учебнике мы ради простоты использовали обычный json файл.)

`$http` сервис возвращает {@link api/ng.$q объект обещания} (promise object) с методом `success`. 
Мы вызываем этот метод для обработки асинхронного ответа и присваиваем данные о телефонах в 
область видимости (scope) нашего контроллера в качестве модели `phones`. Заметьте, что Angular определил
json ответ и преобразовал его для нас!

Чтобы использовать сервис в Angular, вы просто объявляете имена зависимостей которые вам нужны в качестве 
аргументов конструктора контроллера как приведено ниже:

    function PhoneListCtrl($scope, $http) {...}

Система внедрения зависимости Angular-а предоставляет сервисы для вашего контроллера в то время, 
когда он создается. Инжектор также заботится о разрешении любых других зависимостей, которые могут 
быть у запрашиваемого сервиса (сервисы часто зависят от других сервисов).

Заметьте, что имена аргументов очень важны, потому что инжектор использует их для того, чтобы найти 
зависимости.


<img  class="diagram" src="img/tutorial/xhr_service_final.png">


### '$' Prefix Naming Convention

You can create your own services, and in fact we will do exactly that in step 11. As a naming
convention, angular's built-in services, Scope methods and a few other angular APIs have a '$'
prefix in front of the name.  Don't use a '$' prefix when naming your services and models, in order
to avoid any possible naming collisions.

### A Note on Minification

Since angular infers the controller's dependencies from the names of arguments to the controller's
constructor function, if you were to {@link http://en.wikipedia.org/wiki/Minification_(programming)
minify} the JavaScript code for `PhoneListCtrl` controller, all of its function arguments would be
minified as well, and the dependency injector would not be able to identify services correctly.

To overcome issues caused by minification, just assign an array with service identifier strings
into the `$inject` property of the controller function, just like the last line in the snippet
(commented out) suggests:

    PhoneListCtrl.$inject = ['$scope', '$http'];

There is also one more way to specify this dependency list and avoid minification issues — using the
bracket notation which wraps the function to be injected into an array of strings (representing the
dependency names) followed by the function to be injected:

    var PhoneListCtrl = ['$scope', '$http', function($scope, $http) { /* constructor body */ }];

Both of these methods work with any function that can be injected by Angular, so it's up to your
project's style guide to decide which one you use.


## Test

__`test/unit/controllersSpec.js`:__

Because we started using dependency injection and our controller has dependencies, constructing the
controller in our tests is a bit more complicated. We could use the `new` operator and provide the
constructor with some kind of fake `$http` implementation. However, the recommended (and easier) way
is to create a controller in the test environment in the same way that angular does it in the
production code behind the scenes, as follows:

<pre>
describe('PhoneCat controllers', function() {

  describe('PhoneListCtrl', function(){
    var scope, ctrl, $httpBackend;

    beforeEach(inject(function(_$httpBackend_, $rootScope, $controller) {
      $httpBackend = _$httpBackend_;
      $httpBackend.expectGET('phones/phones.json').
          respond([{name: 'Nexus S'}, {name: 'Motorola DROID'}]);

      scope = $rootScope.$new();
      ctrl = $controller(PhoneListCtrl, {$scope: scope});
    }));
</pre>

Note: Because we loaded Jasmine and `angular-mocks.js` in our test environment, we got two helper
methods {@link api/angular.mock.module module} and {@link api/angular.mock.inject inject} that we'll
use to access and configure the injector.

We created the controller in the test environment, as follows:

* We used the `inject` helper method to inject instances of
{@link api/ng.$rootScope $rootScope},
{@link api/ng.$controller $controller} and
{@link api/ng.$httpBackend $httpBackend} services into the Jasmine's `beforeEach`
function. These instances come from an injector which is recreated from scratch for every single
test. This guarantees that each test starts from a well known starting point and each test is
isolated from the work done in other tests.

* We created a new scope for our controller by calling `$rootScope.$new()`

* We called the injected `$controller` function passing the `PhoneListCtrl` function and the created
scope as parameters.

Because our code now uses the `$http` service to fetch the phone list data in our controller, before
we create the `PhoneListCtrl` child scope, we need to tell the testing harness to expect an
incoming request from the controller. To do this we:

* Request `$httpBackend` service to be injected into our `beforeEach` function. This is a mock
version of the service that in a production environment facilitates all XHR and JSONP requests.
The mock version of this service allows you to write tests without having to deal with
native APIs and the global state associated with them — both of which make testing a nightmare.

* Use the `$httpBackend.expectGET` method to train the `$httpBackend` service to expect an incoming
HTTP request and tell it what to respond with. Note that the responses are not returned until we call
the `$httpBackend.flush` method.

Now, we will make assertions to verify that the `phones` model doesn't exist on `scope` before
the response is received:

<pre>
    it('should create "phones" model with 2 phones fetched from xhr', function() {
      expect(scope.phones).toBeUndefined();
      $httpBackend.flush();

      expect(scope.phones).toEqual([{name: 'Nexus S'},
                                   {name: 'Motorola DROID'}]);
    });
</pre>

* We flush the request queue in the browser by calling `$httpBackend.flush()`. This causes the
promise returned by the `$http` service to be resolved with the trained response.

* We make the assertions, verifying that the phone model now exists on the scope.

Finally, we verify that the default value of `orderProp` is set correctly:

<pre>
    it('should set the default value of orderProp model', function() {
      expect(scope.orderProp).toBe('age');
    });
  });
});
</pre>

You should now see the following output in the Karma tab:

       Chrome 22.0: Executed 2 of 2 SUCCESS (0.028 secs / 0.007 secs)



# Experiments

* At the bottom of `index.html`, add a `{{phones | json}}` binding to see the list of phones
  displayed in json format.

* In the `PhoneListCtrl` controller, pre-process the http response by limiting the number of phones
to the first 5 in the list. Use the following code in the $http callback:

         $scope.phones = data.splice(0, 5);


# Summary

Now that you have learned how easy it is to use angular services (thanks to Angular's dependency
injection), go to {@link step_06 step 6}, where you will add some
thumbnail images of phones and some links.


<ul doc-tutorial-nav="5"></ul>
